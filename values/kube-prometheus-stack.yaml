---
defaultRules:   # EKS control panel is managed by AWS, no need to monitor
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: true
commonLabels:
  prometheus: selected
  

grafana:
  enabled: true
  adminPassword: abc123
  defaultDashboardsTimezone: AEST
  # sidecar:
  #   datasources:
  #     enabled: true
  #     defaultDatasourceEnabled: true
  #     isDefaultDatasource: true
  #     name: Prometheus
  #     uid: prometheus
  # additionalDataSources:
  #   - name: Loki
  #     type: loki
  #     access: proxy
  #     isDefault: false
  #     jsonData:
  #       httpHeaderName1: X-Scope-OrgID
  #     secureJsonData:
  #       httpHeaderValue1: 1   
  #     url: http://loki-gateway.loki:3101
#   ingress:
#     enabled: true
#     annotations:
#       kubernetes.io/ingress.class: nginx
#       cert-manager.io/cluster-issuer: dns-01-production
#     hosts:
#       - grafana.xeniumsolution.online
#     tls:
#       - hosts:
#           - grafana.xeniumsolution.online
#         secretName: grafana-tls
# prometheus:
#   enabled: true
#   ingress:
#     enabled: true
#     annotations:
#       kubernetes.io/ingress.class: nginx
#       cert-manager.io/cluster-issuer: dns-01-production
#     hosts:
#       - prometheus.xeniumsolution.online
#     tls:
#       - hosts:
#           - prometheus.xeniumsolution.online
#         secretName: prometheus-tls
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector:
      matchLabels:
        prometheus: selected

    ## If nil, select own namespace. Namespaces to be selected for PodMonitor discovery.
    podMonitorNamespaceSelector:
      matchLabels:
        monitoring: prometheus

    ## Example which selects ServiceMonitors with label "prometheus" set to "somelabel"
    serviceMonitorSelector:
      matchLabels:
        prometheus: selected
        #release: prometheus-stack

    ## Namespaces to be selected for ServiceMonitor discovery.

    ## Example which selects ServiceMonitors in namespaces with label "prometheus" set to "somelabel"
    # serviceMonitorNamespaceSelector:
    #   matchLabels:
    #     monitoring: prometheus     

    # storageSpec:
    #   volumeClaimTemplate:
    #     spec:
    #       #storageClassName: gp2
    #       accessModes: ["ReadWriteOnce"]
    #       resources:
    #         requests:
    #           storage: 5Gi

## Component scraping kube state metrics
##
kubeStateMetrics:
  enabled: true
kube-state-metrics:
  prometheus:
    monitor:
      enabled: true
      additionalLabels:
        prometheus: selected